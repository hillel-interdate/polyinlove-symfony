<?php

namespace AppBundle\Entity;

use AppBundle\Services\Messenger\Chat;
use AppBundle\Services\Messenger\Config;
use AppBundle\Services\Messenger\UserAttributes;
use Cassandra\Date;
use Symfony\Component\BrowserKit\Request;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * UserRepository
 *
 * This class was generated by the DQL ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    private $currentUser;
    private $data;
    private $admin = false;
    private $export = false;
    private $ADMIN_ID = 111;


    public function setSplashShowBingo($likeMeId, $userId)
    {
        $em = $this->getEntityManager();
        $bingo = $em->getRepository('AppBundle:LikeMe')->find($likeMeId);
//        var_dump($likeMeId);die;
        if ($bingo) {
            if ($bingo->getUserFrom()->getId() == $userId) {
                $bingo->setIsShowSplashFrom(1);
            } else {
                $bingo->setIsShowSplashTo(1);
            }
            $em->persist($bingo);
            $em->flush();
        }
        return true;
    }

    public function removeWordsBlocked($post, $fields = array('username', 'about', 'looking'))
    {
        if (count($fields) > 0) {
            //if (in_array('email', $fields)) {
            $em = $this->getEntityManager();
            $emails = $em->getRepository('AppBundle:EmailBlocked')->findAll();
            $phones = $em->getRepository('AppBundle:PhoneBlocked')->findAll();
            $wordsBlocked = $em->getRepository('AppBundle:WordBlocked')->findAll();

            foreach ($fields as $field) {
                //   var_dump($field);die;
                if ($field == 'phone' || $field == 'email') {
                    $word = $field . 's';
                } else {
                    $word = 'wordsBlocked';
                }
//                    var_dump($$word);
                foreach ($$word as $wordBlocked) {
                    if (isset($post[$field])) {
                        $post[$field] = str_ireplace($wordBlocked->getValue(), '', $post[$field]);
                    }
                }
            }


            //  }
//    		$em = $this->getEntityManager();
//    		$wordsBlocked = $em->getRepository('AppBundle:WordBlocked')->findAll();
//        //    /dump($wordsBlocked);die;
//    		foreach ($wordsBlocked as $wordBlocked) {
//    			foreach ($fields as $field) {
//    				if(isset($post[$field])) {
//    					$post[$field] = str_ireplace($wordBlocked->getValue(), '', $post[$field]);
//    				}
//    			}
//    		}
        }
        return $post;
    }

    public function loadUserByUsername($username)
    {

        $username = urldecode((string)$username);
//    	var_dump($username);die;
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email OR u.phone = :phone')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->setParameter('phone', $username)
            ->getQuery()
            ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active user AppBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message);
        }
        return $user;
    }

    public function sendUserLike($fromUser, $toUser, $baseUrl = 'www.polyinlove.com', $emailAddress = 'info@polyinlove.com',
                                 $appName = 'PolyinLove')
    {
//        var_dump( $_SERVER['SERVER_NAME'] );die;
//        var_dump( $_SERVER['SERVER_NAME'] . $fromUser->getMainPhoto()->getFaceWebPath());die;

        $status = $this->getlikeStatus($fromUser, $toUser);
        $em = $this->getEntityManager();
        switch ($status) {
            case 'none':
                //send
                //add Like
                $likeMe = new LikeMe();
                $likeMe->setUserFrom($fromUser)->setUserTo($toUser);
                $em->persist($likeMe);
                $em->flush();
                //send notification
                $userNotification = new UserNotifications();
                $date = new \DateTime();
                $notification = $em->getRepository('AppBundle:Notifications')->find(1);
                $userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();
                $res = 'like';
                break;
            case 'send_me':
                //bingo
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUser->getId(), 'userTo' => $fromUser->getId()));
                $likeMe->setIsBingo(true);
                $em->persist($likeMe);
                //var_dump($em->flush());
                $fromUser->getNotifications();
                $em->persist($fromUser);
                $em->flush();

                $userNotification = new UserNotifications();
                $date = new \DateTime();
                $notification = $em->getRepository('AppBundle:Notifications')->find(2);
                $userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();

                $userNotification = new UserNotifications();
                $userNotification->setLikeMe($likeMe)->setUser($fromUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();


                $settings = $em->getRepository('AppBundle:Settings')->find(1);
                $subject = "Bingo! New notification from the " . $appName . " arena";

                $text = '<html lang="en">
						<head>
							<meta http-equiv="content-type" content="text/html; charset=utf-8">
						</head>
						<body>
    					<div dir="ltr">' . $fromUser->getUsername() . ' liked your picture
                    <br>You have a bingo in the arena<a href="' . $baseUrl . '" target="_blank">here</a>click here to contact ' . $fromUser->getUsername() . '<br>
or open the ' . $appName . ' application.					<br>Good luck!
					<br>Team ' . $appName . '
					<br>' . $baseUrl . '</div>
                    	</body></html>';


                $headers = "MIME-Version: 1.0" . "\r\n";

                $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
                $headers .= 'From: ' . $settings->getContactEmail() . ' <' . $settings->getContactEmail() . '>' . "\r\n";

                $subject1 = "Bingo! New notification from the " . $appName . " arena";

                $text1 = '<html lang="en">
						<head>
							<meta http-equiv="content-type" content="text/html; charset=utf-8">
						</head>
						<body>
    					<div dir="ltr">' . $fromUser->getUsername() . ' liked your picture
                    <br>You have a bingo in the arena<a href="' . $baseUrl . '" target="_blank">here</a>click here to contact ' . $fromUser->getUsername() . '<br>
or open the ' . $appName . ' application.					<br>Good luck!
					<br>Team ' . $appName . '
					<br>' . $baseUrl . '</div>
                    	</body></html>';

                if ($toUser->getIsSentEmail()) mail($toUser->getEmail(), $subject, $text, $headers);
                if ($fromUser->getIsSentEmail()) mail($fromUser->getEmail(), $subject1, $text1, $headers);

                $res = 'bingo';
                break;
            default:
                $res = 'sended';

        }

        return $status;
    }

    public function getlikeStatus($fromUser, $toUser, $bingoSplashStatus = false)
    {
//        var_dump(123);die;
        $fromUserId = $fromUser->getId();
        $toUserId = $toUser->getId();

        $em = $this->getEntityManager();
        //$conn = $em->getConnection();

        /* $sql = "SELECT * FROM likeMe WHERE (from_id = ? and to_id = ?) or (from_id = ? and to_id = ?)";
         $stmt = $conn->prepare($sql);
         $stmt->bindParam(1, $fromUserId, \PDO::PARAM_INT);
         $stmt->bindParam(2, $toUserId, \PDO::PARAM_INT);
         $stmt->bindParam(3, $toUserId, \PDO::PARAM_INT);
         $stmt->bindParam(4, $fromUserId, \PDO::PARAM_INT);
         */
        //$sql_str = $stmt;
        $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $fromUserId, 'userTo' => $toUserId));
        if (empty($likeMe)) {
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUserId, 'userTo' => $fromUserId));
        }
        //$userLikeMe = $stmt->fetchAll();


        if (is_object($likeMe)) {
            //$like = $userLikeMe[0];
            if ($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsBingo()) {
                // I sended like.
                $result = 'i_send';
            } elseif (!$likeMe->getIsBingo() and $likeMe->getUserTo()->getId() == $fromUserId) {
                // user sended me like
                $result = 'send_me';
            } elseif ($likeMe->getIsBingo()) {
                // has been bingo
                if (!$bingoSplashStatus) {
                    $result = 'bingo';
                } else {
                    if (($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsShowSplashFrom()) or ($likeMe->getUserTo()->getId() == $fromUserId and !$likeMe->getIsShowSplashTo())) {
                        $result = 'splash_not_show';
                    } else {
                        $result = 'splash_show_yet';
                    }
                }
            }
        } else {
            $result = 'none';
        }

        return $result;
    }

    public function loadUserByUsernameApi($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email OR u.phone = :phone')
            //->andWhere('u.isActive = :isActive')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->setParameter('phone', $username)
            //->setParameter('isActive', true)
            ->getQuery()
            ->getOneOrNullResult();

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }

    public function getOnline($settings)
    {
        //var_dump($settings['paginator']);die;
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($settings['considered_as_online_minutes_number'] . ' minutes ago'));

        $qb = $this->createQueryBuilder('u');
        $qb->orderBy('u.lastActivityAt', 'DESC')//            ->setParameter('delay', $delay)
        ;
        $qb->andWhere('u.isActive = 1')
            ->andWhere('u.isActivated = 1');
//        $qb->orderBy('u.lastActivityAt', 'DESC');

        $this->setSearchFilter($qb, $settings['per_page']);

//        if($settings['data']['filter'] == 'popularity'){
//            $users = $qb->getQuery()->getResult();
//            shuffle($users);
//            return $users;
//        }

//        return $qb->getQuery()->getResult();
        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page'], array('wrap-queries' => true));
    }

    public function getNew($settings)
    {

        $this->currentUser = $settings['current_user'];
        $settings['data'] = array(
            'filter' => $settings['filter'] ? $settings['filter'] : 'new',
            'page' => $settings['page']
        );

        return $this->search($settings);
//
//        $delay = new \DateTime();
//        $delay->setTimestamp(strtotime($settings['considered_as_new_days_number'] . ' days ago'));
//
//        $qb = $this->createQueryBuilder('u')
//            ->select()
//            ->select()
//            ->andWhere('u.isActive = 1')
//            ->andwhere('u.isNonLocked = 1')
//            ->andwhere('u.isFrozen = 0')
//            ->andWere('u.isActivated = 1')
//            ->orderBy('u.id', 'DESC')
//            ->setMaxResults($settings['per_page'])
//        ;
//
//
//        if($this->currentUser instanceof User && !$this->currentUser->isAdmin()){
//
//            $mans = array(1,4);
//            $womans = array(2,3);
//            if($this->currentUser->getSexOrientation()->getId() == 1) {
//                if(in_array($this->currentUser->getGender()->getId(), $mans)) {
//                    $qb->andWhere('u.gender IN(:womans)')->setParameter('womans', $womans);
//                } else {
//                    $qb->andWhere('u.gender IN (:mans)')->setParameter('mans', $mans);
//                }
//                $qb->andWhere(
//                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
//                )->setParameter('sexOrientation', array(2,3));
//            }elseif ($this->currentUser->getSexOrientation()->getId() == 2){
//                $qb->andWhere('u.gender IN(:mans)')->setParameter('mans', $mans);
//                $qb->andWhere(
//                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
//                )->setParameter('sexOrientation', array(1));
//            }elseif ($this->currentUser->getSexOrientation()->getId() == 3){
//                $qb->andWhere('u.gender IN(:womans)')->setParameter('womans', $womans);
//                $qb->andWhere(
//                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
//                )->setParameter('sexOrientation', array(1));
//            }else{
//
//                $qb->andWhere('u.sexOrientation <> 1 OR (u.sexOrientation = 1 AND u.gender NOT IN(:gender))')
//                    ->setParameter('gender', in_array($this->currentUser->getGender()->getId(), $mans) ? $mans : $womans );
//            }
//        }
//
//        return $qb->getQuery()->getResult();
    }

    public function search($settings)
    {

        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];
        if (!isset($settings['per_page'])) {
            $settings['per_page'] = null;
        }

        $qb = $this->createQueryBuilder('u');

        if (!empty($this->data['id'])) {
            $qb->andWhere('u.id = :id')->setParameter('id', trim($this->data['id']));
        } elseif (!empty($this->data['email'])) {
            $qb->andWhere(
                $qb->expr()->like('u.email', ":email")
            )->setParameter('email', '%' . trim($this->data['email']) . '%');
        } elseif (!empty($this->data['username'])) {
//            var_dump($this->data);
            $qb->andWhere(
                $qb->expr()->like('u.username', ":username")
            )->setParameter('username', '%' . $this->data['username'] . '%');
        } else {
            /*
                        $qb->where('u.id <> :userId')
                            ->setParameter('userId', $this->data['userId'])
                        ;
            */
            if (!empty($this->data['region'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.region', ":region")
                )->setParameter('region', $this->data['region']);
            }

//            if(!empty($this->data['type'][0])){
//                $qb->andWhere(
//                    $qb->expr()->in('u.type', ":type")
//                )->setParameter('type', $this->data['type']);
//            }

            if (!empty($this->data['ageFrom'])) {
                $this->data['date_1'] = date("Y") - $this->data['ageFrom'] . '-' . date("m") . '-' . date("d");
                $qb->andWhere('u.birthday <= :date_1')
                    ->setParameter('date_1', $this->data['date_1']);
            }

            if (!empty($this->data['ageTo'])) {
                $this->data['date_2'] = date("Y") - $this->data['ageTo'] . '-01-01';
                $qb->andWhere('u.birthday >= :date_2')
                    ->setParameter('date_2', $this->data['date_2']);
            }

            if (!empty($this->data['heightFrom'])) {
                $fullHeight = substr_replace($this->data['heightFrom'], '', 1, 1);
                if (strlen($fullHeight) == 2) {
                    $fullHeight = $fullHeight . '0';
                }
                $qb->andWhere('(u.height >= :heightFrom AND u.height < 3) OR u.height >= :fullHeight')
                    ->setParameter('heightFrom', $this->data['heightFrom'])
                    ->setParameter('fullHeight', $fullHeight);;
            }

            if (!empty($this->data['heightTo'])) {
                $fullHeightTo = substr_replace($this->data['heightTo'], '', 1, 1);
                if (strlen($fullHeightTo) == 2) {
                    $fullHeightTo = $fullHeightTo . '0';
                }
                $qb->andWhere('(u.height < :heightTo) OR (u.height < :fullHeightTo AND u.height > 3)')
                    ->setParameter('heightTo', $this->data['heightTo'])
                    ->setParameter('fullHeightTo', $fullHeightTo);
            }


            if (!empty($this->data['body'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.body', ":body")
                )->setParameter('body', $this->data['body']);
            }

            if (!empty($this->data['relationshipStatus'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.relationshipStatus', ":relationshipStatus")
                )->setParameter('relationshipStatus', $this->data['relationshipStatus']);
            }

//            if(!empty($this->data['relationshipType'][0])){
//                $qb->andWhere(
//                    $qb->expr()->in('u.relationshipType', ":relationshipType")
//                )->setParameter('relationshipType', $this->data['relationshipType']);
//            }

//            if(!empty($this->data['lookingFor'][0])){
//                var_dump($this->data['lookingFor']);
//                $qb->andWhere(
//                    $qb->expr()->in('u.lookingFor', ":lookingFor")
//                )->setParameter('lookingFor', $this->data['lookingFor']);
//            }

            if (!empty($this->data['lookingFor'][0])) {
                $qb->join('u.lookingFor', 'p', 'WITH',
                    $qb->expr()->in('p.id', ':lookingFor')
                )->setParameter('lookingFor', $this->data['lookingFor']);
            }

//            if(!empty($this->data['contactGender'][0])){
//                $qb->andWhere(
//                    $qb->expr()->in('u.ContactGender', ":ContactGender")
//                )->setParameter('ContactGender', $this->data['contactGender']);
//            }

            if (!empty($this->data['origin'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.origin', ":origin")
                )->setParameter('origin', $this->data['origin']);
            }
//            var_dump($this->data['origin'][0]);die;
            if (!empty($this->data['hair'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.hair', ":hair")
                )->setParameter('hair', $this->data['hair']);
            }

            if (!empty($this->data['sexOrientation'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.sexOrientation', ":sexOrientation")
                )->setParameter('sexOrientation', $this->data['sexOrientation']);
            }

            if (!empty($this->data['smoking'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.smoking', ":smoking")
                )->setParameter('smoking', $this->data['smoking']);
            }

            if (!empty($this->data['city'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.city', ":city")
                )->setParameter('city', $this->data['city']);
            }

            if (!empty($this->data['nutrition'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.nutrition', ":nutrition")
                )->setParameter('nutrition', $this->data['nutrition']);
            }

            if (!empty($this->data['children'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.children', ":children")
                )->setParameter('children', $this->data['children']);
            }

            if (!empty($this->data['religion'][0])) {
                $qb->andWhere(
                    $qb->expr()->in('u.religion', ":religion")
                )->setParameter('religion', $this->data['religion']);
            }

            if (!empty($this->data['gender'][0])) {
//               dump($this->data);die;
                $qb->andWhere(
                    $qb->expr()->in('u.gender', ":gender")
                )->setParameter('gender', $this->data['gender']);
            }

            if (!empty($this->data['withPhoto'])) {

                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                );
            }

            if (!empty($this->data['zodiac'])) {

                if (!empty($this->data['zodiac'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.zodiac', ":zodiac")
                    )->setParameter('zodiac', $this->data['zodiac']);
                }

            }

//            if(!empty($this->data['zodiac'])) {
//                $qb->andWhere(
//                    $qb->expr()->in('u.zodiac', ":zodiac")
//                )->setParameter('zodiac', $this->data['zodiac']);
//            }


            if ($this->admin) {
                // dump($this->data);die;
                if (!empty($this->data['isActivated'])) {
                    $isActivated = $this->data['isActivated'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isActivated = ' . $isActivated);
                }
                if (!empty($this->data['isVerify'])) {

                    if ($this->data['isVerify'] == 1) {
                        $qb->andWhere('u.verifyCount > 2');
                    } else {
                        $qb->andWhere('u.verifyCount < 3');
                    }

                }

                if (!empty($this->data['zodiac'])) {

                    if (!empty($this->data['zodiac'])) {
                        $qb->andWhere(
                            $qb->expr()->in('u.zodiac', ":zodiac")
                        )->setParameter('zodiac', $this->data['zodiac']);
                    }

                }

                if (!empty($this->data['gender'][0])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.gender', ":gender")
                    )->setParameter('gender', $this->data['gender']);
                }

                if (!empty($this->data['phone'])) {
                    $qb->andWhere(
                        $qb->expr()->like('u.phone', ":phone")
                    )->setParameter('phone', '%' . trim($this->data['phone']) . '%');
                }


                if (!empty($this->data['loginFrom'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.loginFrom', ":loginFrom")
                    )->setParameter('loginFrom', $this->data['loginFrom']);
                }

                if (!empty($this->data['isActive'])) {
                    $isActive = $this->data['isActive'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isActive = ' . $isActive);
                }

                if (!empty($this->data['isFrozen'])) {
                    $isFrozen = $this->data['isFrozen'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isFrozen = ' . $isFrozen);
                }

                if (!empty($this->data['isPhone'])) {
                    $not = $this->data['isPhone'] == 1 ? 'NOT ' : '';
                    $qb->andWhere("u.phone IS " . $not . "NULL");
                }

                if (!empty($this->data['hasPoints'])) {
                    if ($this->data['hasPoints'] == 1) {
                        $qb->andWhere("u.points > 0");
                    } else {
                        $qb->andWhere("u.points = 0");
                    }
                }

                if (!empty($this->data['isPaying'])) {

                    $date = date("Y-m-d");

                    if ($this->data['isPaying'] == 1) {
                        $qb->andWhere("u.startSubscription <= '" . $date . "'")
                            ->andWhere("u.endSubscription >= '" . $date . "'");
                    } else {
                        $qb->andWhere(
                            "u.startSubscription IS NULL OR u.endSubscription IS NULL OR u.endSubscription < '" . $date . "'"
                        );
                    }
                }

                if (!empty($this->data['isPhoto'])) {
                    if ($this->data['isPhoto'] == 1) {
                        $qb->join('u.photos', 'ph', 'WITH',
                            $qb->expr()->eq('ph.isValid', true)
                        );
                    } else {
                        $qb->andWhere(
                            $qb->expr()->not(
                                $qb->expr()->exists("SELECT p.id FROM AppBundle:Photo p WHERE  p.user = u.id AND p.isValid = 1")
                            )
                        );
                    }
                }

                if (!empty($this->data['startSubscriptionFrom']) && !empty($this->data['startSubscriptionTo'])) {
                    $this->setFromToDateConditions(
                        $this->data['startSubscriptionFrom'],
                        $this->data['startSubscriptionTo'],
                        'startSubscription',
                        $qb
                    );
                }

                if (!empty($this->data['endSubscriptionFrom']) && !empty($this->data['endSubscriptionTo'])) {
                    $this->setFromToDateConditions(
                        $this->data['endSubscriptionFrom'],
                        $this->data['endSubscriptionTo'],
                        'endSubscription',
                        $qb
                    );
                }

                if (!empty($this->data['signUpFrom']) && !empty($this->data['signUpTo'])) {
                    $this->setFromToDateConditions(
                        $this->data['signUpFrom'],
                        $this->data['signUpTo'],
                        'signUpDate',
                        $qb
                    );
                }

                if (!empty($this->data['lastVisitedFrom']) && !empty($this->data['lastVisitedTo'])) {
                    $this->setFromToDateConditions(
                        $this->data['lastVisitedFrom'],
                        $this->data['lastVisitedTo'],
                        'lastActivityAt',
                        $qb
                    );
                }

                if (!empty($this->data['ip'])) {
                    $qb->andWhere('u.ip = :ip')->setParameter('ip', $this->data['ip']);
                }

                if (!empty($this->data['isOnHomepage'])) {
                    $qb->andWhere('u.isOnHomepage = :isOnHomepage')->setParameter('isOnHomepage', $this->data['isOnHomepage']);
                }

                //echo $qb->getDQL();
                //die;
            }
        }

        $this->setSearchFilter($qb, $settings);
        // var_dump(13);die;

        if ($this->export) {
            return $qb->distinct()->getQuery()->getArrayResult();
        }

        if (isset($this->data['filter']) && $this->data['filter'] == 'popularity') {
            $users = $qb->getQuery()->getResult();
            shuffle($users);
            return $users;
        }

        if (isset($settings['allResults']) and $settings['allResults']) {
            $users = $qb->getQuery()->getResult();
            return $users;
        }

        if (isset($settings['getCount']) and $settings['getCount']) {
            return count($qb->getQuery()->getResult());
        }

        if (isset($settings['paginator'])) {

            $users = $qb->getQuery()->getResult();
//            var_dump($settings['filter']);die;

//            if(isset($this->data['filter']) && $this->data['filter'] == 'new') {
////                var_dump(13);die;
//                $nqb  = $this->createQueryBuilder('u');
//                $this->setSearchFilter($nqb, $settings, true);
//                $otherUsers = $nqb->getQuery()->getResult();
//
//                $users = array_merge($users, $otherUsers);
//            }


//            if ($this->currentUser->getUsername() == 'tester1') {
//                var_dump($users);die;
//            }

            if ($settings['from_cook']) {
                return $settings['paginator']->paginate($users, $settings['page'], $settings['per_page']);
            }
            return $settings['paginator']->paginate($users, $settings['page'], $settings['per_page']);
        } else {

            return $qb->getQuery()->getResult();
        }
    }

    private function setSearchFilter($qb, $settings, $addToNew = false)
    {


        if (null === $this->data || !isset($this->data['filter'])) {
            $this->data['filter'] = '';
        }

        if (!$this->admin) {

            $qb->andWhere('u.isActive = 1')
                ->andWhere('u.isNonLocked = 1')
                ->andWhere('u.isFrozen = 0')
                ->andWhere('u.isActivated = 1');

            $user = is_object($this->currentUser) ? $this->currentUser->getId() : 0;
            $qb->andWhere('u.id != ' . $user);

//            if ($this->currentUser->getUsername() == 'tester1') {
            // for not show users that in black list
            $sub = $this->getEntityManager()->getRepository('AppBundle:BlackList')->createQueryBuilder('bl');
            $sub->where('bl.owner = :userId AND bl.member = u.id');
            if (is_object($this->currentUser)) {
                $qb->andWhere($qb->expr()->not($qb->expr()->exists($sub->getDQL())))->setParameter('userId', $this->currentUser->getId());
            }

//            }
            if ($this->currentUser instanceof User && !$this->currentUser->isAdmin()) {
                $mans = array(1, 4, 5);
                $womans = array(2, 3, 5);
                $sexOrientation = $this->currentUser->getSexOrientation()->getId();
                $currentGender = $this->currentUser->getGender()->getId();

                if (!isset($this->data['gender'][0]) && !isset($this->data['sexOrientation'][0]) && !isset($this->data['username'][0])) {

//                    var_dump(123);die;
                    if ($currentGender != 5) {
                        if ($sexOrientation == 1) {
                            $qb->andWhere('u.gender IN(:gender)')
                                ->setParameter('gender', in_array($currentGender, $mans) ? $womans : $mans);
                            $qb->andWhere(
                                $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                            )->setParameter('sexOrientation', array(2, 3));
                        } elseif ($sexOrientation == 2) {
                            $qb->andWhere('u.gender IN(:mans)')->setParameter('mans', $mans);
                            $qb->andWhere(
                                $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                            )->setParameter('sexOrientation', array(1));
                        } elseif ($sexOrientation == 3) {
                            $qb->andWhere('u.gender IN(:womans)')->setParameter('womans', $womans);
                            $qb->andWhere(
                                $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                            )->setParameter('sexOrientation', array(1));
                        } else {

                            $qb->andWhere('u.sexOrientation <> 1 OR (u.sexOrientation = 1 AND u.gender NOT IN(:gender))')
                                ->setParameter('gender', in_array($currentGender, $mans) ? $mans : $womans);
                        }
                    }


                } else if (!isset($this->data['sexOrientation'][0])) {

                    if ($currentGender != 5) {

                        $i = 0;
                        $sql = '';
                        $parameters = [];
//                        var_dump(123);die;
                        foreach ($this->data['gender'] as $gender) {
//                            var_dump(123);die;
                            $i++;
//                            var_dump(123);die;
                            if (in_array($currentGender, $womans)) {

                                if (in_array($gender, $womans)) {

                                    if (strlen($sql) > 0) {
                                        $sql .= ') OR ';
                                    }


                                    $sql .= '(u.gender = ?' . $i . ' AND u.sexOrientation NOT IN (1,2)';
                                    $parameters[$i] = $gender;
                                } else if (in_array($gender, $mans)) {

                                    if (strlen($sql) > 0) {
                                        $sql .= ') OR ';
                                    }

                                    $sql .= '(u.gender = ?' . $i . ' AND u.sexOrientation NOT IN (2,3)';
                                    $parameters[$i] = $gender;
                                }
                            } else {

                                if (in_array($gender, $womans)) {

                                    if (strlen($sql) > 0) {
                                        $sql .= ') OR ';
                                    }

                                    $sql .= '(u.gender = ?' . $i . ' AND u.sexOrientation NOT IN (2,3)';
                                    $parameters[$i] = $gender;
                                } else if (in_array($gender, $mans)) {

                                    if (strlen($sql) > 0) {
                                        $sql .= ') OR ';
                                    }

                                    $sql .= '(u.gender = ?' . $i . ' AND u.sexOrientation NOT IN (1,3)';
                                    $parameters[$i] = $gender;
//
                                }
                            }


                        }

//
                        if (strlen($sql) > 0) {
//                            var_dump(123);die;
                            $sql .= ')';
                            $qb->andWhere($sql);
                        }
//                        var_dump($sql);die;

                        foreach ($parameters as $key => $value) {
                            $qb->setParameter($key, $value);
                        }
                    }


                } else {
                    // qwe
                }

                if (in_array($currentGender, $mans)) {
                    $qb->andWhere('u.sexOrientation <> 3');
                } else if (in_array($currentGender, $womans)) {
                    $qb->andWhere('u.sexOrientation <> 2');
                }///2
            }

        }

        switch ($this->data['filter']) {

            default:
            case 'lastActivity':
                // var_dump(123);die;
                $qb->orderBy('u.lastActivityAt', 'DESC');
                break;

            case 'verifiedUser':
                //  var_dump(423);die;
                $qb->orderBy('u.verifyCount', 'DESC');

                break;

            case 'distance':
                if ($this->currentUser->getLatitude() != null and $this->currentUser->getLongitude() != null) {
                    if (!isset($this->data['distance']) or (int)$this->data['distance'] == 0) {
                        $qb->andWhere('(u.latitude IS NOT NULL AND u.longitude IS NOT NULL)');
                        //$qb->AndWhere("get_distance(u.latitude,u.longitude," . $this->currentUser->getLatitude() . "," . $this->currentUser->getLongitude() . ") > 0");
                    }
//                         $qb->orderBy("((u.latitude-" . $this->currentUser->getLatitude() . ")*(u.latitude-" .
//                             $this->currentUser->getLatitude() . ")) + ((u.longitude -" . $this->currentUser->getLongitude() .
//                             ")*(u.longitude - " . $this->currentUser->getLongitude() . "))", "ASC");
                    $qb->addSelect("get_distance(u.latitude,u.longitude," . $this->currentUser->getLatitude() . "," . $this->currentUser->getLongitude() . ") as HIDDEN distance");
                    $qb->orderBy('distance');

                } else {
                    $qb->orderBy('u.lastActivityAt', 'DESC');
                }
                break;

            case 'new':
                $date = new \DateTime('30 days ago');
//                $now = new \DateTime("now");
//                $mow = $now->format('Y-m-d h:i:s');

//                $qb->join('u.photos', 'ph', 'WITH',
//                    $qb->expr()->eq('ph.isValid', true)
//                );
                $qb->leftJoin('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true));
//                $qb->andWhere('u.signUpDate < :date');
//                $qb->setParameter('date', $date->format('Y-m-d h:i:s'));
//                if ($addToNew) {
////                    echo 12;
//                    $qb->andWhere('u.signUpDate < :date');
//                } else {
////                    echo 21;
//                    $qb->andWhere('u.signUpDate > :date');
//                }
//                $qb->setParameter('date', $date->format('Y-m-d h:i:s'))
                //$qb->addSelect('u.signUpDate > "'.$date->format('Y-m-d h:i:s').'" as is_new')->orderBy('is_new', 'DESC');
                $qb->orderBy('ph.isValid', 'DESC')->addOrderBy('u.signUpDate', 'DESC');
                break;

            case 'photo': //$qb->leftJoin('u.photos', 'p', 'WITH',
                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                );
//                $qb->expr()->count('ph.id');
                $qb->addOrderBy('ph.isValid', 'DESC');
//                $qb->addOrderBy('u.lastActivityAt', 'DESC');
                break;

            case 'popularity':

                if ($settings['page'] != null) {
                    $qb->setMaxResults($settings['per_page'])->setFirstResult($settings['per_page'] * $settings['page'])->orderBy('u.views', 'DESC');
                } else {
                    $qb->setMaxResults($settings['per_page'])->orderBy('u.views', 'DESC');
                }
                break;


            /*
             * Admin Filters
             */

            case 'total':
                $qb->orderBy('u.id', 'DESC');
                break;

            case 'active_and_not_frozen':

                $qb->where('u.isActive = 1')
                    ->andWhere('u.isFrozen = 0')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'male':

                $qb->where('u.gender = 1')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'female':

                $qb->where('u.gender = 2')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'MtoF':

                $qb->where('u.gender = 3')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'FtoM':

                $qb->where('u.gender = 4')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'aBinary':

                $qb->where('u.gender = 5')
                    ->orderBy('u.id', 'DESC');
                break;


            case 'with_photos':

                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                )->orderBy('u.id', 'DESC');

                break;

            case 'frozen':

                $qb->where('u.isFrozen = 1')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'inactive':

                $qb->where('u.isActive = 0')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'flagged':

                $qb->where('u.isFlagged = 1')
                    ->orderBy('u.id', 'DESC');
                break;

            case 'paying':

                $date = date("Y-m-d");

                $qb->where("u.startSubscription <= '" . $date . "'")
                    ->andWhere("u.endSubscription >= '" . $date . "'")
                    ->orderBy('u.id', 'DESC');
                break;

            case 'error_paying':
                $em = $this->getEntityManager();
                $payments = $em->getRepository('AppBundle:Payment')->createQueryBuilder('p')->where('p.error > 0')->getQuery()->getResult();//findBy(array('error' ));
                $ids = array();
                foreach ($payments as $payment) {
                    if (!in_array($payment->getUser()->getId(), $ids)) {
                        $ids[] = $payment->getUser()->getId();
                    }
                }
                if (count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                } elseif (count($ids) == 1) {
                    $qb->where("u.id = " . $ids[0]);
                } else {
                    $qb->where("u.id = 0");
                }
                break;

            case 'active_paying':
                $em = $this->getEntityManager();
                $payments = $em->getRepository('AppBundle:Payment')->createQueryBuilder('p')->where('p.isActive = 1')->getQuery()->getResult();
                $ids = array();
                foreach ($payments as $payment) {
                    if (!in_array($payment->getUser()->getId(), $ids)) {
                        $ids[] = $payment->getUser()->getId();
                    }
                }
                if (count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                } elseif (count($ids) == 1) {
                    $qb->where("u.id = " . $ids[0]);
                } else {
                    $qb->where("u.id = 0");
                }
                break;

            case 'today_paying':
                $em = $this->getEntityManager();
                $date = new \DateTime();
                $from = new \DateTime($date->format("Y-m-d") . " 00:00:00");
                $to = new \DateTime($date->format("Y-m-d") . " 23:59:59");

                $paymentHistories = $em->getRepository('AppBundle:PaymentHistory')->createQueryBuilder('ph')
                    ->where('ph.paymentDate BETWEEN :from AND :to')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to)->getQuery()->getResult();
                $ids = array();
                foreach ($paymentHistories as $paymentHistory) {
                    if (!in_array($paymentHistory->getPayment()->getUser()->getId(), $ids)) {
                        $ids[] = $paymentHistory->getPayment()->getUser()->getId();
                    }
                }
                if (count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                } elseif (count($ids) == 1) {
                    $qb->where("u.id = " . $ids[0]);
                } else {
                    $qb->where("u.id = 0");
                }
                break;

        }


        if (isset($this->data['current_route']) && $this->data['current_route'] == 'users_public_list') {
            $qb->orderBy('u.id', 'DESC');
        }

    }


    public function setCountReport($reports, $entity = true)
    {

        $return = ($entity) ? new ArrayCollection() : array();
        //
        foreach ($reports as $report) {
            $data = json_decode($report->getParams(), true);
            $data['filter'] = 'report';

            $count = $this->setAdminMode()->search(
                array(
                    'current_user' => $this->find($this->ADMIN_ID),
                    'data' => $data,
                    'getCount' => true
                )
            );

            $report->setCount($count);
            $res = ($entity) ? $report : array('id' => $report->getId(), 'count' => $report->getCount());
            $return[] = $res;
        }
        $this->data = null;

        return $return;
    }


    public function getUsersForLike($currentUser, $firstUser = false, $limit = 300)
    {
        if (!$currentUser->hasValidPhotos()) {
            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }

        if ($firstUser == $currentUser->getId()) {
            $firstUser = false;
        }

        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
//        $genderId = $currentUser->getGender()->getId();


        $ageFrom = $currentUser->getAgeFrom();
        $ageTo = $currentUser->getAgeTo();
        $canContactGender = '';
        foreach ($currentUser->getContactGender() as $gender) {
            $canContactGender .= $canContactGender ? ', ' . $gender->getId() : $gender->getId();
        }
        $date_ageFrom_birthday = date("Y-m-d h:i:s", strtotime("-$ageFrom year", time()));
        $date_ageTo_birthday = date("Y-m-d h:i:s", strtotime("-$ageTo year", time()));


        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ? ';
        $param2 = ($firstUser) ? $firstUser : $userId;

        $mans = array(1, 4, 5);
        $womans = array(2, 3, 5);
        $strman = '1, 4, 5';
        $strwoman = '2, 3, 5';

        $sexOrientation = $currentUser->getSexOrientation()->getId();
        $currentGender = $currentUser->getGender()->getId();

        $add_sql = '';
        if ($currentGender != 5) {
            $add_sql .= " AND (";
            if ($sexOrientation == 1) {
                $add_sql .= "  u.gender_id IN(  ";
                $add_sql .= in_array($currentGender, $mans) ? $strwoman : $strman;
                $add_sql .= ")";
                $add_sql .= " AND u.sex_orientation_id NOT IN(2, 3))";
            } elseif ($sexOrientation == 2) {
                $add_sql .= "  u.gender_id IN(" . $strman . ')';
                $add_sql .= " AND u.sex_orientation_id NOT IN(1))";
            } elseif ($sexOrientation == 3) {
                $add_sql .= "  u.gender_id IN(" . $strwoman . ")"; //2
                $add_sql .= " AND u.sex_orientation_id NOT IN(1))";
            } else {
                $add_sql .= "  u.sex_orientation_id <> 1 OR (u.sex_orientation_id = 1 AND u.gender_id NOT IN(";
                $add_sql .= in_array($currentGender, $mans) ? $strman : $strwoman;
                $add_sql .= ")))";
            }
        }

        // $add_sql .= " AND u.birthday > '$date_ageTo_birthday' AND u.birthday < '$date_ageFrom_birthday'";
        /* if (!$canContactGender) $canContactGender = '1, 2, 3, 4, 5';
         $add_sql .= " AND u.gender_id IN($canContactGender)";
        */
        $add_sql .= 'AND u.id <> ' . $currentUser->getId();

        $age = $currentUser->age();

        $sql = " SELECT
                    i.ext, i.id AS imageId,
                    u.id, u.username, u.birthday
                FROM  
                    user u
                JOIN 
                    file i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 
                    
             
                
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . " 
                 " . $add_sql . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND u.age_from <= $age
                And u.age_to >= $age
               
              
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)
                AND NOT EXISTS (SELECT member_id FROM black_list WHERE owner_id = ? AND member_id = u.id)		
                AND NOT EXISTS (SELECT to_id FROM arena_dislike WHERE from_id = ? AND to_id = u.id)		
                	
                ORDER BY RAND()
                LIMIT $limit 
                
 
                
            ";


        $stmt = $conn->prepare($sql);

        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
        $stmt->execute();

        $result = $stmt->fetchAll();

//        var_dump(423);
        if (count($result) < 200) {
//            var_dump(123);
            $sql = "
                SELECT
                    
                     i.ext, i.id AS imageId, 
                    		u.id, u.username, u.birthday
                FROM
                    user u

                JOIN
                    file i
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1
               
                
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . "
                " . $add_sql . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)
                AND NOT EXISTS (SELECT member_id FROM black_list WHERE owner_id = ? AND member_id = u.id)	
                AND NOT EXISTS (SELECT to_id FROM arena_dislike WHERE from_id = ? AND to_id = u.id)		

                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()
            ";
            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if ($firstUser) {
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            } else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
            $stmt->execute();

            $result2 = $stmt->fetchAll();
        } else {
            $result2 = [];
        }
        if ($firstUser) {
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'ext' => $firstUser->getMainPhoto()->getExt(),
                'imageId' => $firstUser->getMainPhoto()->getId(),
                //'faceImage' => $firstUser->getMainPhoto()->getFaceWebPath(),
                //'age' => $firstUser->age(),
                'area' => $firstUser->getRegion()->getName(),
            );
            /*
            $sql = "SELECT * FROM like_me WHERE (from_id = ? and to_id = ?) or (to_id = ? and from_id = ?)";
            $stmt = $conn->prepare($sql);
            $firstUserId = $firstUser->getId();
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $firstUserId, \PDO::PARAM_INT);
            $userLikeMe = $stmt->fetchAll();
            if(count($userLikeMe) > 0){
                $like = $userLikeMe[0];
                if($like['from_id'] == (int)$userId)
                    $firstUserArr['i_like'] = true;
                else
                    $firstUserArr['bingo'] = $like['is_bingo'];
            }
            */
            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if (empty($likeMe)) {
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            //var_dump(!is_object($likeMe) or !$likeMe->getIsBingo());
            if (!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }

        }


        //if($firstUser) {
        // var_dump($firstUser->getId());die;
        // return($firstUser);
        // }
//        dump($result, $result2);die;
        return array('online' => $result, 'other' => $result2, 'photos' => count($currentUser->getPhotos()));
    }


    public function getUsersForLikeNew($currentUser, $firstUser = false, $limit = 300)
    {
        if (!$currentUser->hasValidPhotos()) {
            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }

        if ($firstUser == $currentUser->getId()) {
            $firstUser = false;
        }

        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
//        $genderId = $currentUser->getGender()->getId();


        $ageFrom = $currentUser->getAgeFrom();
        $ageTo = $currentUser->getAgeTo();
        $canContactGender = '';
        foreach ($currentUser->getContactGender() as $gender) {
            $canContactGender .= $canContactGender ? ', ' . $gender->getId() : $gender->getId();
        }
        $date_ageFrom_birthday = date("Y-m-d h:i:s", strtotime("-$ageFrom year", time()));
        $date_ageTo_birthday = date("Y-m-d h:i:s", strtotime("-$ageTo year", time()));


        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ? ';
        $param2 = ($firstUser) ? $firstUser : $userId;

        $mans = array(1, 4, 5);
        $womans = array(2, 3, 5);
        $strman = '1, 4, 5';
        $strwoman = '2, 3, 5';

        $sexOrientation = $currentUser->getSexOrientation()->getId();
        $currentGender = $currentUser->getGender()->getId();


        $add_sql = '';
        if ($currentGender != 5) {
            $add_sql .= " AND (";
            if ($sexOrientation == 1) {
                $add_sql .= "  u.gender_id IN(  ";
                $add_sql .= in_array($currentGender, $mans) ? $strwoman : $strman;
                $add_sql .= ")";
                $add_sql .= " AND u.sex_orientation_id NOT IN(2, 3))";
            } elseif ($sexOrientation == 2) {
                $add_sql .= "  u.gender_id IN(" . $strman . ')';
                $add_sql .= " AND u.sex_orientation_id NOT IN(1))";
            } elseif ($sexOrientation == 3) {
                $add_sql .= "  u.gender_id IN(" . $strwoman . ")"; //2
                $add_sql .= " AND u.sex_orientation_id NOT IN(1))";
            } else {
                $add_sql .= "  u.sex_orientation_id <> 1 OR (u.sex_orientation_id = 1 AND u.gender_id NOT IN(";
                $add_sql .= in_array($currentGender, $mans) ? $strman : $strwoman;
                $add_sql .= ")))";
            }
        }

//        $add_sql .= " AND u.birthday > '$date_ageTo_birthday' AND u.birthday < '$date_ageFrom_birthday'";
//        if (!$canContactGender) $canContactGender = '1, 2, 3, 4, 5';
//        $add_sql .= " AND u.gender_id IN($canContactGender)";
        $add_sql .= 'AND u.id <> ' . $currentUser->getId();

        $age = $currentUser->age();

        $sql = " SELECT
                    i.ext, i.id AS imageId,
                    u.id, u.username, u.birthday
                FROM  
                    user u
                JOIN 
                    file i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 
                    
             
                
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . " 
                 " . $add_sql . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND u.age_from <= $age
                And u.age_to >= $age
               
              
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)
                AND NOT EXISTS (SELECT member_id FROM black_list WHERE owner_id = ? AND member_id = u.id)		
                AND NOT EXISTS (SELECT to_id FROM arena_dislike WHERE from_id = ? AND to_id = u.id)		
                	
                ORDER BY RAND()";


        $stmt = $conn->prepare($sql);

        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
        $stmt->execute();

        $result = $stmt->fetchAll();

//        var_dump(423);
        if (count($result) < 200) {
//            var_dump(123);
            $sql = "
                SELECT
                    
                     i.ext, i.id AS imageId, 
                    		u.id, u.username, u.birthday
                FROM
                    user u

                JOIN
                    file i
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1
               
                
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . "
                " . $add_sql . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)
                AND NOT EXISTS (SELECT member_id FROM black_list WHERE owner_id = ? AND member_id = u.id)	
                AND NOT EXISTS (SELECT to_id FROM arena_dislike WHERE from_id = ? AND to_id = u.id)		

                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if ($firstUser) {
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            } else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
            $stmt->execute();

            $result2 = $stmt->fetchAll();
        } else {
            $result2 = [];
        }

        if ($firstUser) {
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'ext' => $firstUser->getMainPhoto()->getExt(),
                'imageId' => $firstUser->getMainPhoto()->getId(),
                'area' => $firstUser->getRegion()->getName(),
            );

            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if (empty($likeMe)) {
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            if (!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }

        }

        return array('online' => $result, 'other' => $result2, 'photos' => count($currentUser->getPhotos()));
    }


    public function getList($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['request_data'];

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.isActive = 1')
            ->andWhere('u.isNonLocked = 1')
            ->andwhere('u.isFrozen = 0')
            ->join('u.' . $settings['inverse_list'], 'list', 'WITH',
                $qb->expr()->eq('list.' . $settings['type'], $this->currentUser)
            )->orderBy('list.date');


//        $qb->orderBy('list.id', 'DESC');

        $this->setAdminMode();
        $this->setSearchFilter($qb, $settings);
//        if ($this->currentUser->getUsername() == 'tester1') {
//            var_dump(213);
        $qb->orderBy('list.id', 'DESC');
//        }
        if (count($qb->getQuery()->execute()) <= $settings['per_page']) {
//            var_dump(123);die;
            return $qb->getQuery()->execute();
        } else {
//            var_dump(3132);die;
            return $qb->getQuery()->execute();
//            return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
        }
    }

    private function setFromToDateConditions($dateFrom, $dateTo, $dateField, $qb)
    {
        $dateArr_1 = explode("/", $dateFrom);
        $dateArr_2 = explode("/", $dateTo);

        $date_1 = $dateArr_1[2] . '-' . $dateArr_1[1] . '-' . $dateArr_1[0] . ' 00:00:00';
        $date_2 = $dateArr_2[2] . '-' . $dateArr_2[1] . '-' . $dateArr_2[0] . ' 23:59:59';

        $qb->andWhere("u." . $dateField . " >= '" . $date_1 . "'")
            ->andWhere("u." . $dateField . " <= '" . $date_2 . "'");
        //echo $date_1 . '<br>';
        //echo $date_2 . '<br><br>';
    }


    public function setAdminMode()
    {
        $this->admin = true;
        return $this;
    }

    public function setExportMode()
    {
        $this->export = true;
        return $this;
    }

    public function getData()
    {
        return $this->data;
    }

    public function getAdminStat()
    {
        return $this->getEntityManager()->getConnection()->query("CALL get_admin_stat")->fetch();
    }

    public function saveBanReason($users, $reason)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->update()
            ->set('u.banReason', ':reason')
            ->where(
                $qb->expr()->in('u.id', ':users')
            )->setParameter('reason', $reason)
            ->setParameter('users', explode(',', $users));

        $qb->getQuery()->execute();
    }

    public function givePoint($toAll)
    {
        $qb = $this->createQueryBuilder('u');

        if ($toAll == 1) {
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->getQuery()
                ->execute();
        } else {
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->where('u.points = 0')
                ->getQuery()
                ->execute();
        }
    }

    public function onHomepage()
    {
        $qb = $this->createQueryBuilder('u');
        return $qb->where('u.isOnHomepage = 1')
            ->join('u.photos', 'p', 'WITH',
                $qb->expr()->andX(
                    $qb->expr()->eq('p.isMain', true),
                    $qb->expr()->eq('p.isValid', true)
                )
            )
//            ->andWhere(
//                $qb->expr()->like('u.email', ':email')
//            )
//            ->setParameter('email','%interdate%')
            ->getQuery()
            ->getResult();
    }

    public function getSplashBingo($user)
    {
        $em = $this->getEntityManager();
        $res = false;
        //$conn = $em->getConnection();
        $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userFrom' => $user, 'isBingo' => 1, 'isShowSplashFrom' => 0));
        for ($i = 0; $i < count($bingos); $i++) {
            if (!$bingos[$i]->getUserTo()->getMainPhoto()) {
                unset($bingos[$i]);
            }
        }
        if (count($bingos) == 0) {
            $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userTo' => $user, 'isBingo' => 1, 'isShowSplashTo' => 0));

            for ($i = 0; $i < count($bingos); $i++) {
                if (!$bingos[$i]->getUserFrom()->getMainPhoto()) {
                    unset($bingos[$i]);
                }
            }

        }

        if (count($bingos) > 0 && $bingos[0]) {
//             var_dump($bingos[0]);
            $result = $bingos[0];


            if ($result->getUserFrom()->getId() == $user->getId()) {
                //var_dump($contactUser = $result->getMainPhoto());
                $contactUser = $result->getUserTo();
            } else {

                $contactUser = $result->getUserFrom();
            }
            //  var_dump($contactUser->getId());

            // var_dump($contactUser->getMainPhoto()->getFaceWebPath() ? 1 : 0);
            // var_dump($user->getMainPhoto() ? 1 : 0);

            if ($contactUser->getMainPhoto() && $contactUser->getMainPhoto()->getFaceWebPath() && $user->getMainPhoto() && $user->getMainPhoto()->getFaceWebPath()) {

                $res = array(
                    'id' => $result->getId(),
                    'photo1' => $contactUser->getMainPhoto()->getFaceWebPath(),
                    'photo2' => $user->getMainPhoto()->getFaceWebPath(),
                    'username' => $contactUser->getUsername(),
                    'contact_id' => $contactUser->getId(),
                );
            }
        }

        return $res;
    }

    public function newGetDialogs($currentUser)
    {
        $dialogs = array();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();
        $isMessReadAvailable = $this->isMessReadAvailable($currentUser);
//        var_dump($isMessReadAvailable);
        $textPayment = $currentUser->getPoints() == 0 ? 'please purchase a subacription to view this message.' : 'Please click here to use a point or purrchase a subscription to view this message.';

        $sqlAdminMess = "SELECT *, (SELECT COUNT(id) FROM messengerLastMessages WHERE (user1 = ".$this->ADMIN_ID." AND user2 = {$userId}) OR (user2 = {$this->ADMIN_ID} AND user1 = {$userId})) as inbox FROM messenger WHERE (toUser = {$userId} AND fromUser = {$this->ADMIN_ID} AND msgToDel = 0) OR (fromUser = {$userId} AND toUser = {$this->ADMIN_ID} AND msgFromDel = 0) ORDER BY `date` DESC LIMIT 1";
        $stmt = $conn->prepare($sqlAdminMess);
        $stmt->execute();
        $checkAdmin = $stmt->fetch();
        if (count($checkAdmin['messageId']) > 0 and $checkAdmin['inbox'] == 0) {
            $messId = $checkAdmin['messageId'];
            $stmt = $conn->prepare("INSERT INTO messengerLastMessages (messageId,messageId2,user1,user2,user1_del,user2_del) VALUES ({$messId},{$messId},{$this->ADMIN_ID},{$userId},1,0)");
            $stmt->execute();
        }
        $checkAdminMess = '';

        $sql = "SELECT m.date, m.message, m.isInline, m.fromUser, m.isRead, u.gender_id, u.id as uid, u.last_activity_at, u.username, isPaying(u.start_subscription, u.end_subscription, NOW()) as contactIsPaying,IF(lm.user2 = 4214,lm.user1,lm.user2) as id,
                (SELECT COUNT(messageId) FROM messenger WHERE toUser = ? AND isRead = 0 AND fromUser = IF(lm.user2 = ?,lm.user1,lm.user2)) as newMessagesNumber, f.ext, f.id AS photoId, f.updated
            FROM
                messengerLastMessages lm
            JOIN
                messenger m
            ON
                m.messageId = (CASE WHEN lm.user2 = ? THEN lm.messageId2 ELSE lm.messageId END)

             JOIN
            	user u
             ON
             	u.id = IF(lm.user2 = ?,lm.user1,lm.user2)

            LEFT JOIN file f
            ON f.user_id = u.id AND f.is_main = 1 AND f.is_valid = 1
            WHERE
                ((lm.user2 = ? AND lm.user2_del = 0 ) OR (lm.user1 = ? AND lm.user1_del = 0)) AND lm.user1 <> lm.user2
                AND u.is_frozen = 0 AND u.is_non_locked = 1 and u.is_active = 1 AND u.is_non_locked = 1
             ORDER BY (CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC, m.messageId DESC";/*(CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC*/
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        //var_dump($result);die;

        $row = $result[3];
        $face = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '-face.' . $row['ext'];
        $full = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '.' . $row['ext'];

        //$_SERVER['DOCUMENT_ROOT'] . $this->getUploadDir() . '/' . $this->id . '-face.' . $this->ext;

        $row['photo'] = $row['photoId'] && $row['ext'] ?
            (is_file($_SERVER['DOCUMENT_ROOT'] . $face) && filesize($_SERVER['DOCUMENT_ROOT'] . $face) > 0) ? $face : $full
            :
            '/images/no_photo_' . $row['gender_id'] . '.jpg';

        foreach ($result as $row) {

//            var_dump($row);
            $delay = new \DateTime(1440 . ' minutes ago');
            foreach ($delay as $d) {
                break;
            }

            $row['online'] = $row['last_activity_at'] > $d;

            $row['username'] = strip_tags(urldecode(nl2br($row['username'])));

            $face = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '-face.' . $row['ext'];
            $full = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '.' . $row['ext'];
            $row['photo'] = $row['photoId'] && $row['ext'] ?
                ((is_file($_SERVER['DOCUMENT_ROOT'] . $face) && filesize($_SERVER['DOCUMENT_ROOT'] . $face) > 0) ? $face . '?r=' . $row['updated'] : $full)
                :
                '/images/no_photo_' . $row['gender_id'] . '.jpg';

            $row['message'] = $isMessReadAvailable || $row['isRead'] || $row['fromUser'] == $userId ? strip_tags(urldecode(nl2br($row['message']))) : $textPayment;

            $row['date'] = date("d-m-Y H:i", strtotime($row['date']));
            if (empty($row['photo'])) {
                $row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg';
            }
            $row['id'] = $row['uid'];
            $dialogs[] = $row;

            //

        }
        return $dialogs;
    }

    public function getDialogs($currentUser)
    {
        $dialogs = array();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();
        $isMessReadAvailable = $this->isMessReadAvailable($currentUser);
        $textPayment = $currentUser->getPoints() == 0 ? 'לא ניתן לקרוא את ההודעה. לצפייה בהודעה לחצו לרכישת מנוי' : 'לא ניתן לקרוא את ההודעה. לצפייה בהודעה לחצו לרכישת מנוי או לשימוש בנקודה';


        $sql = "SELECT m.date, m.message, m.isInline, m.fromUser, m.isRead, IF(lm.user2 = ?,lm.user1,lm.user2) as id,
                (SELECT COUNT(messageId) FROM messenger WHERE toUser = ? AND isRead = 0 AND fromUser = IF(lm.user2 = ?,lm.user1,lm.user2)) as newMessagesNumber
            FROM 
                 messengerLastMessages lm
            JOIN
                messenger m
            ON
                m.messageId = (CASE WHEN lm.user2 = ? and lm.messageId2 > 0 THEN lm.messageId2 ELSE lm.messageId END)  
            WHERE
                ((lm.user2 = ? AND lm.user2_del = 0 ) OR (lm.user1 = ? AND lm.user1_del = 0)) AND lm.user1 <> lm.user2
            ORDER BY (CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC, m.messageId DESC ";

        $stmt = $conn->prepare($sql);
        $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        $sql2 = "SELECT u.gender_id, u.last_activity_at, f.ext, f.id AS photoId, u.username, isPaying(u.start_subscription, u.end_subscription, NOW()) as contactIsPaying
                    FROM
                user u
                LEFT JOIN  
                file f
            ON
                f.user_id = u.id AND f.is_main = 1 AND f.is_valid = 1
            WHERE
                u.id = ? AND u.is_frozen = 0 AND u.is_non_locked = 1 and u.is_active = 1 AND u.is_non_locked = 1";


        $row['photo'] = $row['photoId'] && $row['ext'] ?
            (is_file($_SERVER['DOCUMENT_ROOT'] . $face) && filesize($_SERVER['DOCUMENT_ROOT'] . $face) > 0) ? $face : $full
            :
            '/images/no_photo_' . $row['gender_id'] . '.jpg';

        foreach ($result as $row) {
            $delay = new \DateTime(1440 . ' minutes ago');
            foreach ($delay as $d) {
                break;
            }

            $row['online'] = $row2['last_activity_at'] > $d;
            $row['gender_id'] = $row2['gender_id'];
            $row['username'] = $row2['username'];
            $row['photo'] = $row2['photoId'] && $row2['ext'] ?
                '/media/photos/' . $row['id'] . '/' . $row2['photoId'] . '.' . $row2['ext']
                :
                '/images/no_photo_' . $row2['gender_id'] . '.jpg';

            $row['contactIsPaying'] = $row2['contactIsPaying'];
            $contactIsPaying = $row2['contactIsPaying'];
            $row['message'] = $isMessReadAvailable || $row['isRead'] == '1' || $row['fromUser'] == $userId ? strip_tags(urldecode(nl2br($row['message']))) : $textPayment;

            $row['date'] = date("d-m-Y H:i", strtotime($row['date']));
            if (empty($row['photo'])) {
                $row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg';
            }

            $dialogs[] = $row;
        }
        return $dialogs;
    }

    public function oldGetDialogsTest($currentUser)
    {
        $dialogs = array();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();
        $isMessReadAvailable = $this->isMessReadAvailable($currentUser);
        $textPayment = $currentUser->getPoints() == 0 ? 'This message can not be read. Please click here to purchase a subscription' : 'This message cannot be read. Click here to use a point to read it.';


        $sql = "SELECT m.date, m.message, m.isInline, m.fromUser, m.isRead, IF(lm.user2 = :userId,lm.user1,lm.user2) as id, u.username, u.id as uid,
                (SELECT COUNT(messageId) FROM messenger WHERE toUser = :userId AND isRead = 0 AND fromUser = IF(lm.user2<>:userId,lm.user1,lm.user2)) as newMessagesNumber
            FROM 
                 messengerLastMessages lm
            JOIN
                messenger m
            ON
                m.messageId = (CASE WHEN lm.user2 = :userId THEN lm.messageId2 ELSE lm.messageId END)

             JOIN
            	user u
             ON
             	u.id = IF(lm.user2 = :userId,lm.user1,lm.user2)

            LEFT JOIN file f
            ON f.user_id = u.id AND f.is_main = 1 AND f.is_valid = 1
            WHERE
                ((lm.user2 = :userId AND lm.user2_del = 0 ) OR (lm.user1 = :userId AND lm.user1_del = 0)) AND lm.user1 <> lm.user2
                AND u.is_frozen = 0 AND u.is_non_locked = 1 and u.is_active = 1 AND u.is_non_locked = 1
             ORDER BY (CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC, m.messageId DESC";

        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':userId', $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
//        $stmt->bindParam(7, $userId, \PDO::PARAM_INT);

        $stmt->execute();
        $result = $stmt->fetchAll();
        $row = $result[3];

        $face = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '-face.' . $row['ext'];
        $full = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '.' . $row['ext'];

        $row['photo'] = $row['photoId'] && $row['ext'] ?
            (is_file($_SERVER['DOCUMENT_ROOT'] . $face) && filesize($_SERVER['DOCUMENT_ROOT'] . $face) > 0) ? $face : $full
            :
            '/images/no_photo_' . $row['gender_id'] . '.jpg';

        foreach ($result as $row) {
            $delay = new \DateTime(1440 . ' minutes ago');
            foreach ($delay as $d) {
                break;
            }
            $row['online'] = $row['last_activity_at'] > $d;
            $row['username'] = strip_tags(urldecode(nl2br($row['username'])));
            $face = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '-face.' . $row['ext'];
            $full = '/media/photos/' . $row['uid'] . '/' . $row['photoId'] . '.' . $row['ext'];
            $row['photo'] = $row['photoId'] && $row['ext'] ?
                ((is_file($_SERVER['DOCUMENT_ROOT'] . $face) && filesize($_SERVER['DOCUMENT_ROOT'] . $face) > 0) ? $face . '?r=' . $row['updated'] : $full)
                :
                '/images/no_photo_' . $row['gender_id'] . '.jpg';

            $row['message'] = $isMessReadAvailable ? strip_tags(urldecode(nl2br($row['message']))) : $textPayment;

            $row['date'] = date("d-m-Y H:i", strtotime($row['date']));
            if (empty($row['photo'])) {
                $row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg';
            }
            $row['id'] = $row['uid'];
            $dialogs[] = $row;

        }
        return $dialogs;
    }


    public function isMessReadAvailable($currentUser)
    {
        if (!in_array($currentUser->getGender()->getId(), array(1, 4))) {
            return true;
        }

        $settings = $this->getEntityManager()->getRepository('AppBundle:Settings')->find(1);
        if (!$settings->getIsCharge()
// this line makes the app behave as in paying mode for users with interdate in their name
//            && strpos($currentUser->getEmail(), 'interdate') === false
        ) {
            return true;
        } else {
            return $currentUser->isPaying();
        }
    }


    public function siteIsPaying()
    {
        $em = $this->getEntityManager();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        return $settings->getIsCharge();
    }


    public function getDistance($user1, $user2)
    {
        $distance = null;
        if ($user1->getLatitude() != null and $user1->getLongitude() != null and $user2->getLatitude() != null and $user2->getLongitude() != null) {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "SELECT get_distance(" . $user1->getLatitude() . "," . $user1->getLongitude() . "," . $user2->getLatitude() . "," . $user2->getLongitude() . ") as distance";
            $stmt = $conn->prepare($sql);
            $stmt->execute();
            $distance = $stmt->fetchAll();
            $distance = (number_format((float)$distance[0]['distance'], 2) < 1) ? number_format((float)$distance[0]['distance'], 2) : number_format($distance[0]['distance'], 0, '.', '');
        }

        return $distance;
    }


    public function deleteDialog($user, $contact)
    {

        $conn = $this->getEntityManager()->getConnection();


        $sql = "SELECT * FROM messengerLastMessages AS lm WHERE (user1 = $user AND user2 = $contact) OR (user1 = $contact AND user2 = $user)";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        $res = $stmt->fetchAll();

        if ($res) {

            try {
                $howDelete = $res[0]['user1'] == $user ? 'user1_del' : 'user2_del';
                $id = $res[0]['id'];
                $sql = "UPDATE messengerLastMessages SET " . $howDelete . " = 1 WHERE id=?";
                $stmt = $conn->prepare($sql);
                $stmt->execute([$id]);

                $sql = "UPDATE messenger SET msgFromDel = 1 WHERE (fromUser = $user AND toUser = $contact)";
                $stmt = $conn->prepare($sql);
                $stmt->execute();

                $sql = "UPDATE messenger SET msgToDel = 1 WHERE (fromUser = $contact AND toUser = $user)";
                $stmt = $conn->prepare($sql);
                $stmt->execute();
                return array(
                    'deleted' => true
                );
            } catch (Exception $e) {
                return array(
                    'deleted' => false
                );
            }
        }

    }
//return array(
//'deleted' => true
//);

    public function getUsersForLike2($currentUser, $firstUser = false, $limit = 300)
    {
        //  var_dump(123); die;
        if (!$currentUser->hasValidPhotos()) {

            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
        $genderId = $currentUser->getGender()->getId();
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ?';
        $param2 = ($firstUser) ? $firstUser->getId() : $userId;

        $sql = "
                SELECT
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */ . " 
                    i.name as image,
                    u.id, u.username, u.birthday
                FROM  
                    user u
           
                JOIN 
                    photo i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . "
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			 
                ORDER BY RAND() LIMIT " . $limit . "
            ";

        $stmt = $conn->prepare($sql);
        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        if ($firstUser) {
            $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        } else {
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        }
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        if (count($result) < 200) {
            //$top = 250 - count($result);
            $sql = "
                SELECT 
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */ . "
                    i.name as image,
                    		u.id, u.username, u.birthday
                FROM  
                    user u		
            
                JOIN
                    photo i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1		
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . " 	
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			
                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()
            ";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if ($firstUser) {
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            } else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->execute();
            $result2 = $stmt->fetchAll();
        } else {
            $result2 = false;
        }

        if ($firstUser) {
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'image' => $firstUser->getMainPhoto()->getWebPath(),
                //'faceImage' => $firstUser->getMainPhoto()->getFaceWebPath(),
                //'age' => $firstUser->age(),
                'area' => $firstUser->getRegion()->getName(),
            );
            /*
            $sql = "SELECT * FROM like_me WHERE (from_id = ? and to_id = ?) or (to_id = ? and from_id = ?)";
            $stmt = $conn->prepare($sql);
            $firstUserId = $firstUser->getId();
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $firstUserId, \PDO::PARAM_INT);
            $userLikeMe = $stmt->fetchAll();
            if(count($userLikeMe) > 0){
                $like = $userLikeMe[0];
                if($like['from_id'] == (int)$userId)
                    $firstUserArr['i_like'] = true;
                else
                    $firstUserArr['bingo'] = $like['is_bingo'];
            }
            */
            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if (empty($likeMe)) {
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            //var_dump(!is_object($likeMe) or !$likeMe->getIsBingo());
            if (!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }
        }
        //var_dump(123);die;

        return array('online' => $result, 'other' => $result2, 'photos' => 4 /*count($currentUser->getPhotos())*/);
    }

    public function getNotLoginNew()
    {


        $mans = $this->getTenUsersByGenders('1,4');
        $womans = $this->getTenUsersByGenders('2,3');
        $suffle_array = array();
        for ($i = 0; $i < 10; $i++) {
            $suffle_array[] = $mans[$i];
            $suffle_array[] = $womans[$i];
        }

        return $suffle_array;

    }


    /**
     * @param $in string  string of IDs of gender
     *
     * Get 10 new users from the passed genders
     *
     * @return array
     */
    private function getTenUsersByGenders($in)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT * FROM user WHERE gender_id IN($in) ORDER BY id DESC LIMIT 10";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }


    public function startCall($user, $contact)
    {
        $em = $this->getEntityManager();
        $video = new Video();
        $video->setStartDate(new \DateTime());
        $video->setUserFrom($user);
        $video->setUserTo($contact);
        $video->setStatus('call');
        $em->persist($video);
        $em->flush();
    }


    public function callUserIsBusy($contact_id)
    {
        $call = $this->getEntityManager()->getRepository('AppBundle:Video')->findBy(array(
            'userTo' => $contact_id,
            'endDate' => null,
        ));

        return (boolean)$call;

    }


    /**
     * @param User $contact = the user that call to him
     *
     * if this the fist iteration between current user and passed user, create a new row in "communication".
     * Send 2 messages - 1 for current user, 1 for passed user  about missing call
     * Send to passed user email
     *
     * @return null
     */
    public function missingCall(User $user, User $contact)
    {

//        $messenger = $this->getEntityManager()->get;

        $em = $this->getEntityManager();
        $communication = $em->getRepository('AppBundle:Communication');

        $currentUserId = $user->getId();
        $contactId = $contact->getId();

        $contacted = $communication->findBy(array(
            'owner' => $currentUserId,
            'member' => $contactId
        ));

        if (!$contacted) {
            $contacted = $communication->findBy(array(
                'owner' => $contactId,
                'member' => $currentUserId
            ));
        }


        if (count($contacted) === 0) {
            $comm = new Communication();
            $comm->setOwner($this->currentUser);
            $comm->setMember($contact);
            $em->persist($comm);
            $em->flush();

            $userAttributes = new UserAttributes();
            $userAttributes->post($this->config->contacted,
                array(
                    $currentUserId,
                    $contactId,
                )
            );
        }


        $userImage = $user->getMainPhoto()->getFaceWebPath();

        $messages = array(
            1 => array(
                'from' => $currentUserId,
                'to' => $contactId,
                'message' => $user->getUsername() . ' חיפש/ה אותך לשיחת וידאו ולא היית זמינה',
            ),
            2 => array(
                'from' => $contactId,
                'to' => $currentUserId,
                'message' => 'השיחה ל' . $contact->getUsername() . ' הסתיימה ללא מענה',
            )
        );


        $options['userId'] = $currentUserId;
        $options['contactId'] = $contactId;


        $chat = new Chat($options);
        if ($contact->getIsSentEmail() && $chat->isNotSentToday()) {

            $subject = "Polydate | הודעה חדשה ";

            $text = '
					<div style="direction:rtl;">
						ממתינה לך הודעה חדשה
						<br />
						מ<strong>' . $user->getUsername() . '</strong><br />
						גיל: ' . $user->age() . '<br />
						עיר: ' . $user->getCity()->getName() . '
						<br /><br />
						<img src="' . $userImage . '" alt="" width="130" />
						<br /><br />
						https://www.polydate.co.il
					</div>
				';

            $headers = "MIME-Version: 1.0" . "\r\n";
            $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
            $headers .= 'From: admin@richdate.co.il <admin@richdate.co.il>' . "\r\n";
            //$headers .= 'Cc: myboss@example.com' . "\r\n";

            if (filter_var($contact->getEmail(), FILTER_VALIDATE_EMAIL)) {
                //echo $contactData['userEmail']; die;
                mail($contact->getEmail(), $subject, $text, $headers);
            }
        }
        return array(
            'messages' => $messages,
        );
    }


    /**
     * @param $id int   if $id is 0 - create a new call, else - use a call with id $id
     * @param User $contact object the user that call to him
     * @param $message string the new status of call
     *
     *
     * @return array
     */
    public function call($user, $contact, $id, $message)
    {

        $em = $this->getEntityManager();
        $date = new \DateTime();
        $sendPush = false;
        if ($id == 0) {

            if ($message != 'close') {
                //creating a new row about call in chat
//                var_dump(123);
                $message = 'call';
                $call = new Video();
                $call->setStatus($message);
                $call->setUserTo($contact);
                $call->setUserFrom($user);
                $call->setStartDate($date);
                $em->persist($call);
                $em->flush();
//               var_dump($call->getStatus());
                $sendPush = true;
            } else {
                return null;
            }

        } else {
            $call = $em->getRepository('AppBundle:Video')->find($id);
        }
//        var_dump(3125);
        if ($message == 'call' and $call->getStatus() == 'call' and $call->getUserTo()->getId() == $user->getId()) {
            $message = 'answer';
        }
//        var_dump(3124);
        if ($message == 'close' and $call->getStatus() == 'call') {
//            $users = new Users();
            //send message missing call to msgToId
            return array(
                'messages' => $this->missingCall($call->getUserFrom(), $call->getUserTo())
            );
        }
//        var_dump(3123);
        if ($call->getId() > 0 and $message == 'call' and strtotime($date) > strtotime($call->getStartDate())) {
//            //need update
//            $sql = "
//	    		UPDATE " . $this->config->messages->table . " SET msgDate = ?, msgFromId = ?, msgToId = ?, msgRead = 1, msgBody = ?, msgFromDel = 1, msgToDel = 1, audio = '[VIDEO]' WHERE msgId = ?";
//            //$this->db->exec("set names utf8");
//            $stmt = $this->db->prepare($sql);
//            $stmt->bindParam(1, $date);
//            $stmt->bindParam(2, $this->userId, PDO::PARAM_INT);
//            $stmt->bindParam(3, $this->chatWith, PDO::PARAM_INT);
//            $stmt->bindParam(4, $message);
//            $stmt->bindParam(5, $call['msgId']);
//            $stmt->execute();
//            $call = array(
//                'msgId' => $call['msgId'],
//                'msgDate' => new DateTime($date),
//                'msgFromId' => 	$this->userId,
//                'msgToId' => $this->chatWith,
//                'msgRead' => 1,
//                'msgBody' => $message,
//                'msgFromDel' => 1,
//                'msgToDel' => 1,
//                'audio' => '[VIDEO]'
//            );
//            $call->setStartDate($date);
//            $call->set
//            //send push
//            $sendPush = true;
//            // $this->callPushNotification();

        } elseif ($call->getId() > 0 and $message != $call->getStatus()) {
            //update status
//            var_dump($message, $call->getStatus());
            if ($message == 'close' && ($call->getStatus() == 'call' || $call->getStatus() == 'not_answer')) {
                $message = 'not_answer';
                $call->setEndDate(new \DateTime());
            }
//            var_dump(123);
            $call->setStatus($message);
            $em->persist($call);
            $em->flush();
//            var_dump(42);
        }
//        var_dump(3121);
//        $call['sendPush'] = $sendPush;
//        var_dump(array(
//            'userFrom' => $call->getUserFrom()->getId(),
//            'userTo' => $call->getUserTo()->getId(),
//            'status' => $call->getStatus(),
//            'startDate' => $call->getStartDate()->format('Y'),
//            'endDate' => $call->getEndDate(),
//        ));
        return array(
            'callId' => $call->getId(),
            'userFrom' => $call->getUserFrom()->getId(),
            'userTo' => $call->getUserTo()->getId(),
            'status' => $call->getStatus(),
            'startDate' => $call->getStartDate()->format('Y'),
            'endDate' => $call->getEndDate(),
        );
    }

    public function get_is_add_verify($userFrom, $userTo)
    {
        $verify_rep = $this->getEntityManager()->getRepository('AppBundle:Verify');
        $verify = $verify_rep->findBy(array(
            'userFrom' => $userFrom,
            'userTo' => $userTo
        ));
        return (boolean)$verify;
    }

    /**
     * @param $user_id integer current user id
     * @param $user_gender integer current user gender id
     *  call to get_statistics procedure for the current user
     *
     * @return array
     */
    public function getUserStatistics(int $user_id, int $user_gender)
    {
        $manager = $this->getEntityManager();
        $settings = $manager->getRepository('AppBundle:Settings')->find(1);
        $conn = $manager->getConnection();

        $delay = new \DateTime();
        $delay->setTimestamp(strtotime(
                $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber() . ' minutes ago')
        );

        $is_new_delay = new \DateTime();
        $is_new_delay->setTimestamp(strtotime(
                $settings->getUserConsideredAsNewAfterDaysNumber() . ' days ago')
        );

        return $conn->query("CALL get_statistics ('"
            . $delay->format('Y-m-d H:i:s.000000') . "', '"
            . $user_id . "', '"
            . $user_gender . "', '"
            . $is_new_delay->format('Y-m-d H:i:s.000000') . "')")
            ->fetch();
    }

    public function getSystemMessages($user_id)
    {


    }

    public function testStatisctics($userId)
    {
//        $sqlFrom = "SELECT id FROM ? WHERE memberId = ? AND ownerId = ?";
//
//        $sqlTo = "";

        $counts = [];

        $em = $this->getEntityManager();
        $view = $em->getRepository('AppBundle:View')->findBy([
            'owner' => $userId,
        ]);
        $counts['viewed'] = count($view);
        unset($view);


        $viewMe = $em->getRepository('AppBundle:View')->findBy([
            'member' => $userId,
        ]);
        $counts['viewedMe'] = count($viewMe);
        unset($viewMe);

        $connected = $em->getRepository('AppBundle:Communication')->findBy([
            'owner' => $userId,
        ]);
        $counts['connected'] = count($connected);
        unset($connected);

        $connectedMe = $em->getRepository('AppBundle:Communication')->findBy([
            'member' => $userId,
        ]);
        $counts['connectedMe'] = count($connectedMe);
        unset($connectedMe);

        $favorited = $em->getRepository('AppBundle:Favorite')->findBy([
            'owner' => $userId,
        ]);
        $counts['favorited'] = count($favorited);
        unset($favorited);

        $favoriteMe = $em->getRepository('AppBundle:Favorite')->findBy([
            'member' => $userId,
        ]);
        $counts['favoritedMe'] = count($favoriteMe);
        unset($favoriteMe);

        $blackList = $em->getRepository('AppBundle:BlackList')->findBy([
            'owner' => $userId
        ]);
        $counts['blacklisted'] = count($blackList);
        unset($blackList);

        $showPhoto = $em->getRepository('AppBundle:ShowPhoto')->findBy([
            'member' => $userId
        ]);
        $counts['showPhoto'] = count($showPhoto);
        unset($showPhoto);

        $user = $em->getRepository('AppBundle:User')->find($userId);

        $counts['newNotificationsNumber'] = count($user->getNotifications());
        unset($user);


        return $counts;

//        $stmt = $conn->prepare($sql);
//        $stmt->bindParam(1, $fromUserId, \PDO::PARAM_INT);
//        $stmt->bindParam(2, $toUserId, \PDO::PARAM_INT);
//        $stmt->bindParam(3, $toUserId, \PDO::PARAM_INT);
//        $stmt->bindParam(4, $fromUserId, \PDO::PARAM_INT);
    }


}
